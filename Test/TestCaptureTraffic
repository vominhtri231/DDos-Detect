import datetime

from dpkt import pcap, ethernet, http, dpkt

import Helper.print_http_requests

from Helper.print_http_requests import mac_addr, inet_to_str

for timestamp, buf in pcap:

    # Unpack the Ethernet frame (mac src/dst, ethertype)
    eth = ethernet.Ethernet(buf)

    # Make sure the Ethernet data contains an IP packet
    if not isinstance(eth.data, ip.IP):
        print('Non IP Packet type not supported %s\n' % eth.data.__class__.__name__)
        continue

    # Now grab the data within the Ethernet frame (the IP packet)
    ip = eth.data

    # Check for TCP in the transport layer
    if isinstance(ip.data, tcp.TCP):

        # Set the TCP data
        tcp = ip.data

        # Now see if we can parse the contents as a HTTP request
        try:
            request = http.Request(tcp.data)
        except (dpkt.NeedData, dpkt.UnpackError):
            continue

        # Pull out fragment information (flags and offset all packed into off field, so use bitmasks)
        do_not_fragment = bool(ip.off & ip.IP_DF)
        more_fragments = bool(ip.off & ip.IP_MF)
        fragment_offset = ip.off & ip.IP_OFFMASK

        # Print out the info
        print('Timestamp: ', str(datetime.datetime.utcfromtimestamp(timestamp)))
        print('Ethernet Frame: ', mac_addr(eth.src), mac_addr(eth.dst), eth.type)
        print('IP: %s -> %s   (len=%d ttl=%d DF=%d MF=%d offset=%d)'.format(inet_to_str(ip.src), inet_to_str(ip.dst), ip.len, ip.ttl, do_not_fragment, more_fragments, fragment_offset))
        print('HTTP request: %s\n' % repr(request))
